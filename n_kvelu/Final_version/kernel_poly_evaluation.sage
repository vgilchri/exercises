#**********************************************************************************

#       Algorithm for : Computing an \ell-Isogeny given a kernel point generator

#**********************************************************************************

from ctool import OpCount
# we count xADD's, xDBL's, add's, mult's, div's, square's

#####################################################

########## Valuation of an integer n wrt 2 ##########

#####################################################



def valuation_2(n) :
  res=0
  while (n%2)==0 :
    OpCount.op("add", str(k))
    res+=1
    n=n/2
    OpCount.op("div", str(k))
  return (res)

#####################################

########## Montgomery xADD ##########

#####################################



#def xADD(xP,xQ,xR):
#    return (xP*xQ-1)^2/(xP-xQ)^2/xR

def xADD(P,Q,R):
	# montgomery xADD
    OpCount.op("xADD", str(k))
    xP,zP = P
    xQ,zQ = Q
    xR,zR = R
    U = (xP-zP)*(xQ+zQ)
    if COUNT_ALL:
        OpCount.op("add", str(k))
        OpCount.op("add", str(k))
        OpCount.op("mult", str(k))
        V = (xP+zP)*(xQ-zQ)
    if COUNT_ALL:
        OpCount.op("add", str(k))
        OpCount.op("add", str(k))
        OpCount.op("mult", str(k))
    res1 = zR*((U+V)**2)
    if COUNT_ALL:
        OpCount.op("square", str(k))
        OpCount.op("add", str(k))
        OpCount.op("mult", str(k))
        res2 = xR*((U-V)**2)
    if COUNT_ALL:
        OpCount.op("square", str(k))
        OpCount.op("add", str(k))
        OpCount.op("mult", str(k))
    if res2 == 0:
        res1 = 1
        res2 = 0
    else:
        res1 = res1/res2
        OpCount.op("inv", str(k))
        res2 = 1
    return [res1, res2]


#####################################

########## Montgomery xDBL ##########

#####################################



def xDBL(x,a):
    if COUNT_ALL:
        OpCount.op("mult", str(k))
        OpCount.op("mult", str(k))
        OpCount.op("mult", str(k))
        OpCount.op("add", str(k))
        OpCount.op("add", str(k))
        OpCount.op("add", str(k))
        OpCount.op("inv", str(k))
        OpCount.op("square", str(k))
        OpCount.op("square", str(k))
        OpCount.op("square", str(k))
    OpCount.op("xDBL", str(k))
    return (x^2-1)^2/(4*x*(x^2+a*x+1))

#####################################

############## Lemma 1 ##############

#####################################

# l is the order of the kernel group
#k_prime and a_l_prime are defined the same as in the overleaf i.e if k or a_l is even then it's divided by 2

# This function returns true if lemma 1 applies and false otherwise

def Condition_lemma(k_prime,a_l,a_l_prime,l) :
  if a_l == l-1:
    return True
  if a_l==(l-1)/2 :
    if l%4==3 :
      return True
    elif valuation_2(k_prime)==valuation_2(a_l_prime)+1 :
      return True
  return False

#####################################

########### lemma 1 primes ##########

#####################################

# Returns a list of primes for which lemma 1 is verified
# Remark : this is not the complete list of such primes

def list_primes_lemma(n):
  list_of_fields = []
  for l in primes(100000):
      K = GF(l)
      element = K.2
      if element.multiplicative_order() == l-1: # We only look for primes for which 2 is a generator
        list_of_fields.append(l)
  return(list_of_fields)




#       Version where we get evaluate without computing the whole kernel polynomial

#****************************************************************************************

# S0 : list of the generators of Galois orbits (x-coordinates)
# T : Kernel group (x-coordinates)
# G : Kernel group generator (Point)
# A : Elliptic curve Montgomery coefficient (in K)

def evaluate_from_G(p,k,G,A,l,P): # Returns the evaluation at P of the Kernel polynomial generated by G

    Gx=G[0]
    Px=P[0]
    k_prime = copy(k)
    if k % 2 == 0:
        k_prime = k/2
        if COUNT_ALL:
            OpCount.op("div", str(k))
        K_even = GF((p,k_prime),'x')
        Gx =K_even(Gx)
        Px=K_even(Px)
        A = K_even(A)
    K2 = GF(l)
    element = K2(2)
    a_l = element.multiplicative_order()
    a_l_prime = a_l
    if a_l % 2 == 0:
        a_l_prime = a_l/2
        if COUNT_ALL:
            OpCount.op("div", str(k))
    #print("k_prime: {}\na_l: {}\na_l_prime: {}\nl: {}".format(k_prime,a_l,a_l_prime,l))
    if Condition_lemma(k_prime,a_l,a_l_prime,l): #Checks if lemma 1 applies or not
    	S_0=get_S0_true(Gx,A,l,k_prime)
    else :
    	E = EllipticCurve(K,[0,K(A),0,1,0])
    	if k % 2 == 0:
    		S_0=get_S0_false(G,A,l,k_prime,K_even,E)
    	else :
    		S_0=get_S0_false(G,A,l,k_prime,K,E)
    res=Px-S_0[0]
    if COUNT_ALL:
        OpCount.op("add", str(k))
    for i in range (1,len(S_0)) : #Multiplies all generators of Galois orbits
        res=res*(Px-S_0[i])
        if COUNT_ALL:
            OpCount.op("mult", str(k))
            OpCount.op("add", str(k))
    power=1
    for i in range (1,k) : # Frobenius powering
        power=power + pow(p,i)
        if COUNT_ALL:
            OpCount.op("frob", str(k))

    res=pow(res,power)
    OpCount.op("frob", str(k))
    res= K(res)
    return(res)


#       Get the isogeny

#****************************************************************************************

def compute_rationals_bis(E, T, l, kX, K, k, A): # Compute the rationnals function for getting isogeny from E with kernel points T
    a1,a2,a3, a4, a6= 0, A, 0, 1, 0 #coefficients
    S = range(1,(l+1)/2)
    if l > 1:
      assert max(S) == (l-1)/2


    YY = X^3+a2*X^2+a4*X+a6

    YYprime = YY.diff()

    Psi = prod(X-t for t in T) #kernel polynomial
    #Psi = kX(Psi) # in case l=1
    Psiprime = Psi.diff()
    Psiprimeprime = Psiprime.diff()
    xsum = sum(K(t) for t in T)
    Phi = 4*YY*(Psiprime^2-Psiprimeprime*Psi)-2*YYprime*Psiprime*Psi+(l*X-xsum)*Psi^2

    assert Phi == 4*(X^3+a2*X^2+a4*X+a6)*(Psiprime^2-Psiprimeprime*Psi)-2*(3*X^2+2*a2*X+a4)*Psiprime*Psi+(l*X-xsum)*Psi^2
    Phiprime = Phi.diff()
    Omega = Phiprime*Psi-2*Phi*Psiprime
    return Psi, Phi, Omega

